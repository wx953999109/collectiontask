spring:
  jackson.date-format: yyyy-MM-dd HH:mm:ss
  datasource:
    # 更换p6spy的驱动
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: "jdbc:p6spy:mysql://localhost:3306/collectiontask?useAffectedRows=true&allowMultiQueries=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false"
    username: root
    password: Wuhao19920205!@#
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 20
      min-idle: 10
      test-while-idle: true
      validation-query: select 1
      max-active: 100
  main:
    banner-mode: off
  thymeleaf:
    cache: false
    mode: HTML5
    encoding: UTF-8
    servlet:
      content-type: text/html

  quartz:
    job-store-type: jdbc
    # 是否等待任务执行完毕后，容器才会关闭
    wait-for-jobs-to-complete-on-shutdown: true
    scheduler-name: SpringBootScheduler
    properties:
      org:
        quartz:
          threadPool:
            # 线程数量
            threadCount: 5
            # 线程优先级
            threadPriority: 5
            # 线程池中线程名称的前缀
            threadNamePrefix: test-thread
            # 加载任务代码的ClassLoader是否从外部继承
            threadsInheritContextClassLoaderOfInitializingThread: true
          jobStore:
            # 最大能忍受的触发超时时间，如果超时则认为“失误”
            misfireThreshold: 5000
            # 选择JDBC的存储方式
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            # 类似于Hibernate的dialect，用于处理DB之间的差异，StdJDBCDelegate能满足大部分的DB（授权）
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 在调度流程的第一步，也就是拉取待即将触发的triggers时，是上锁的状态，即不会同时存在多个线程拉取到相同的trigger的情况，也就避免的重复调度的危险。参考：https://segmentfault.com/a/1190000015492260
            acquireTriggersWithinLock: true


server:
  port: 9002

# mybatis-plus相关配置
mybatis-plus:
  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:mapper/*.xml
  # 以下配置均有默认值,可以不设置
  global-config:
    db-config:
      #主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: auto
      #字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"
      field-strategy: NOT_NULL
      #数据库类型
      db-type: MYSQL
      logic-delete-field: del
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: false
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  type-aliases-package: com.wh.business.collectiontask
  config-location: classpath:mybatis.cfg.xml

logging:
  file:
    name: "logs/log.log"
  level:
    root: INFO
    org.springframework: ERROR
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%t]){faint} %clr(%-40.40logger{39}){cyan}[lineno:%line]    %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39}[lineno:%line]: %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 20